# Job template for Windows builds
# Required job variables:
# - buildConfig: 'Debug'
# - configCodeCoverage: 'off'
# - configVectorization: 'SSE 2'

steps:
- powershell: |
    if ($env:configCodeCoverage -eq 'on') {
      # Install OpenCppCoverage
      wget https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.7.0/OpenCppCoverageSetup-x64-0.9.7.0.exe -OutFile OpenCppCoverageSetup.exe
      $proc = Start-Process -filePath ./OpenCppCoverageSetup.exe -ArgumentList "/verysilent" -workingdirectory . -PassThru
      $proc | Wait-Process
    }

    # Install lxml for python
    pip install lxml

  displayName: 'Prepare Environment'

# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/cmake
- task: CMake@1
  inputs:
    workingDirectory: 'build'
    cmakeArgs: -DCMAKE_BUILD_TYPE=$(buildConfig) -DVCL_CODE_COVERAGE:BOOL=$(configCodeCoverage) -DVCL_BUILD_BENCHMARKS:BOOL=off -DVCL_BUILD_TESTS:BOOL=on -DVCL_BUILD_TOOLS:BOOL=off -DVCL_BUILD_EXAMPLES:BOOL=off -DVCL_VECTORIZE:STRING="$(configVectorization)" ../src

- powershell: |
    cmake --build build --config $(buildConfig) --target vcl.core.test
    cmake --build build --config $(buildConfig) --target vcl.components.test
    cmake --build build --config $(buildConfig) --target vcl.geometry.test
    cmake --build build --config $(buildConfig) --target vcl.math.test
  displayName: 'Build'
  continueOnError: false

- powershell: |
    # Execute unit-tests and report success/failure of tests using task commands
    # https://github.com/Microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md

    cmake --build build --config $(buildConfig) --target vcl.test
    $runTestSuccess=$?
    # Convert ctest output to junit-format
    # http://alexott.blogspot.com/2012/03/jenkins-cmakectest.html
    pushd build/tests
    if (Test-Path "Testing/TAG") {
      python ../../ci/ctest2junit.py . ../../ci/ctest2junit.xsl > JUnitResults.xml
      if (!(Test-Path "JUnitResults.xml")) {
        echo '##vso[task.complete result=Failed;]FAILED'
        exit 1
      }
    }
    popd
    if ($runTestSuccess) {
      echo '##vso[task.complete result=Succeeded;]DONE'
    } else {
      echo '##vso[task.complete result=SucceededWithIssues;]DONE'
    }
  displayName: 'Run Unit Tests'

# Publish unit test results
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: 'build/tests/**/JUnitResults.xml'
    #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
    mergeTestResults: true # Optional
    #testRunTitle: # Optional
    #buildPlatform: # Optional
    #buildConfiguration: # Optional
    #publishRunAttachments: true # Optional
  displayName: 'Publish Test Results'
  condition: succeededOrFailed()

# Publish Code Coverage Results
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-code-coverage-results
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '**/cTestCoverage.xml'
    #reportDirectory: # Optional
    #additionalCodeCoverageFiles: # Optional
    failIfCoverageEmpty: true
  displayName: 'Publish Code Coverage Report'
  condition: and(succeededOrFailed(), eq(variables['configCodeCoverage'], 'on'))

