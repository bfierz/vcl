/*
 * This file is part of the Visual Computing Library (VCL) release under the
 * MIT license.
 *
 * Copyright (c) 2016 Basil Fierz
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
namespace
{
const char* module = R"glsl(

#version 430 core

// Number of elements
uniform uint size;

// Local layout
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

// Main methods
#ifdef scanExclusiveLocal1

// Output data
layout(std430, binding = 0) buffer Destination
{
  uvec4 dst[];
};

// Input data
layout(std430, binding = 1) buffer Source
{
  uvec4 src[];
};

// Number of elements to process
uniform uint N;

void main()
{
	// Load data
	uvec4 idata4 = uvec4(0);
	if (4 * gl_GlobalInvocationID.x < N)
		idata4 = src[gl_GlobalInvocationID.x];

	// Calculate exclusive scan
	uvec4 odata4 = scan4Exclusive(idata4, size);

	// Write back
	if (4 * gl_GlobalInvocationID.x < N)
		dst[gl_GlobalInvocationID.x] = odata4;
}
#elif defined scanExclusiveLocal2

// Output data
layout(std430, binding = 0) buffer Destination
{
  uint dst[];
};

// Input data
layout(std430, binding = 1) buffer Source
{
  uint src[];
};

// Intermediate work data
layout(std430, binding = 2) buffer Workspace
{
  uint buf[];
};

// Number of elements to process
uniform uint N;

// Exclusive scan of top elements of bottom-level scans (4 * WORKGROUP_SIZE)
void main()
{
    // Load top elements
    // Convert results of bottom-level scan back to inclusive
    // Skip loads and stores for inactive work-items of the work-group with highest index(pos >= N)
    uint data = 0;
    if (gl_GlobalInvocationID.x < N)
	{
		data =
			dst[(4 * WORKGROUP_SIZE - 1) + (4 * WORKGROUP_SIZE) * gl_GlobalInvocationID.x] + 
			src[(4 * WORKGROUP_SIZE - 1) + (4 * WORKGROUP_SIZE) * gl_GlobalInvocationID.x];
	}

    // Compute
    uint odata = scan1Exclusive(data, N);

    // Avoid out-of-bound access
    if (gl_GlobalInvocationID.x < N)
        buf[gl_GlobalInvocationID.x] = odata;
}

#elif defined uniformUpdate

// Output data
layout(std430, binding = 0) buffer Destination
{
  uvec4 dst[];
};

// Input data
layout(std430, binding = 1) buffer Workspace
{
  uint buf[];
};

// Top element to pass down
shared uint top;

// Final step of large-array scan: combine basic inclusive scan with exclusive scan of top elements of input arrays
void main()
{
    uvec4 data4 = dst[gl_GlobalInvocationID.x];

    if (gl_LocalInvocationID.x == 0)
        top = buf[gl_WorkGroupID.x];

    memoryBarrierShared();
	barrier();
    data4 += uvec4(top);
    dst[gl_GlobalInvocationID.x] = data4;
}
#endif
)glsl";
}
