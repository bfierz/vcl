/*
 * This file is part of the Visual Computing Library (VCL) release under the
 * MIT license.
 *
 * Copyright (c) 2016 Basil Fierz
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
namespace
{
const char* module_scan = R"glsl(

// Exchange data during scan
shared uint l_data[SCAN_SHARED_MEM_SIZE];

// Naive inclusive scan: O(N * log2(N)) operations based on Blelloch
// Allocate 2 * 'size' local memory, initialize the first half
// with 'size' zeros avoiding if(pos >= offset) condition evaluation
// and saving instructions
uint scan1Inclusive(uint idata, uint size)
{
    //uint pos = 2 * gl_LocalInvocationID.x - (gl_LocalInvocationID.x & (size - 1));
	uint pos = 2 * gl_LocalInvocationID.x - (gl_LocalInvocationID.x % size);

    l_data[pos] = 0;
    pos += size;
    l_data[pos] = idata;

    for (uint offset = 1; offset < size; offset <<= 1)
	{
		memoryBarrierShared();
		barrier();
	
        uint t = l_data[pos] + l_data[pos - offset];
		memoryBarrierShared();
		barrier();
	
        l_data[pos] = t;
    }

    return l_data[pos];
}

uint scan1Exclusive(uint idata, uint size)
{
    return scan1Inclusive(idata, size) - idata;
}

// Vector scan: the array to be scanned is stored
// in work-item private memory as uvec4
uvec4 scan4Inclusive(uvec4 data4, uint size)
{
    // Level-0 inclusive scan
    data4.y += data4.x;
    data4.z += data4.y;
    data4.w += data4.z;

    // Level-1 exclusive scan
    uint val = scan1Inclusive(data4.w, size / 4) - data4.w;

    return (data4 + uvec4(val));
}

uvec4 scan4Exclusive(uvec4 data4, uint size)
{
    return scan4Inclusive(data4, size) - data4;
}
)glsl";
}
