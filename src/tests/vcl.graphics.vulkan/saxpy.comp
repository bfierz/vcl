/*
 * This file is part of the Visual Computing Library (VCL) release under the
 * MIT license.
 *
 * Copyright (c) 2018 Basil Fierz
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#version 440

// Defines the size of the work-group (specialization constants)
layout(local_size_x_id = 0, local_size_y_id = 1) in;

layout(push_constant) uniform Parameters
{
	// Total width
	uint Width;

	// Total height
	uint Height;

	// Saxpy scale 'a'
	float a;
} params;

layout(std430, set = 0, binding = 0) buffer ArrayX { float x[]; };
layout(std430, set = 0, binding = 1) buffer ArrayY { float y[]; };

void main()
{
   if (params.Width <= gl_GlobalInvocationID.x || params.Height <= gl_GlobalInvocationID.y)
   {
      return;
   }

   const uint idx = params.Width*gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;
   y[idx] += params.a * x[idx];
}
